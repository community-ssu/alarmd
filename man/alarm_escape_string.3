.TH ALARM_ESCAPE_STRING 3 "Oct  5, 2006" "Nokia"

.SH NAME
alarm_escape_string, alarm_unescape_string, alarm_unescape_string_noalloc \- Escape / unescape strings

.SH SYNOPSIS
.B #include <alarm_event.h>
.sp
.BI "char *alarm_escape_string(const char *" string );
.br
.BI "char *alarm_unescape_string(const char *" string );
.br
.BI "char *alarm_unescape_string_noalloc(char *" string );

.SH DESCRIPTION
The
.BR alarm_escape_string ()
function escapes the
.I string
so that it isn't concidered as a localisation string by alarm dialog. All
occurrences of '{', '}' and '\\' are escaped with \\. The return value is
a newly allocated string and should be freed with
.B free(3).

The
.BR alarm_unescape_string ()
and
.BR alarm_unescape_string_noalloc ()
unescape a string escaped with
.BR alarm_escape_string ()
or just about any escaping that uses \\ to escape characters. The difference
between these functions is that
.BR alarm_unescape_string ()
allocates memory for the returned string, whereas
.BR alarm_unescape_string_noalloc ()
modifies the passed string. This can be done, as the unescaped string is at
most as long as the original string. The unescape functions have checking for
strings ending with '\\', and the single backslash is put into the resulting
string. If NULL is passed, NULL is returned by all functions.

.SH SEE ALSO
.BR alarm_event_add (3)

.SH HISTORY
Oct  5 2006: Initial version of this manual page.

.SH COPYRIGHT
Copyright \(co 2006 Nokia Corporation.

This is free software; see /usr/share/common-licenses/LGPL-2.1 for license
conditions.  There is NO  warranty;  not even for MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.
